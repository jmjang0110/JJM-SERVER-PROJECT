#include "pch.h"
#include "GameMap.h"

int GameMap[HEIGHT][WIDTH] = {
	{2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
	{0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0},
	{0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0},
	{0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0},
	{0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1},
	{0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
	{0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
	{0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
	{1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0},
	{1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

//int GameMap[HEIGHT][WIDTH] = {
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
//	{0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0 },
//	{0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
//	
//};

void ClearMap() {
	int copy[HEIGHT][WIDTH] = { 
		{2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
		{0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0},
		{0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0},
		{0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0},
		{0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1},
		{0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
		{0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
		{0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0},
		{1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	};
	std::memcpy(GameMap, copy, sizeof(copy));
}

bool CheckLine(int x1, int y1, int x2, int y2, int cellsize) {
	// 각 좌표의 실제 픽셀 좌표로 변환 (각 셀 크기가 40x40)
	int realX1 = x1 * cellsize + (cellsize / 2); // 셀의 중간으로 위치 변경
	int realY1 = y1 * cellsize + (cellsize / 2);
	int realX2 = x2 * cellsize + (cellsize / 2);
	int realY2 = y2 * cellsize + (cellsize / 2);

	// 기울기 m 계산, x1 == x2이면 수직선이라 기울기를 계산할 필요 없음
	if (realX1 == realX2) {
		// 수직선일 때
		for (int y = min(realY1, realY2); y <= max(realY1, realY2); ++y) {
			int mapY = y / cellsize; // 맵의 y 좌표로 변환
			if (mapY >= 0 && mapY < HEIGHT && GameMap[mapY][realX1 / cellsize] == OBSTACLE) {
				return false; // 장애물이 있으면 false
			}
		}
	}
	else {
		// 기울기 m 계산
		float m = static_cast<float>(realY2 - realY1) / (realX2 - realX1);

		// y 절편 b 계산
		float b = realY1 - m * realX1;

		// 수평선이나 기울기가 있는 직선일 때
		// X값을 픽셀 단위로 계산
		for (int x = min(realX1, realX2); x <= max(realX1, realX2); ++x) {
			// y값 계산 (부동소수점 계산 후 정수로 변환)
			int y = static_cast<int>(m * x + b);

			// X와 Y 값을 셀 좌표로 변환
			int mapX = x / cellsize; // 맵의 x 좌표로 변환
			int mapY = y / cellsize; // 맵의 y 좌표로 변환

			// 범위 체크: y가 맵의 범위 내에 있을 경우
			if (mapY >= 0 && mapY < HEIGHT && mapX >= 0 && mapX < WIDTH) {
				if (GameMap[mapY][mapX] == OBSTACLE) {
					return false; // 장애물이 있으면 false
				}
			}
		}
	}

	return true; // 장애물이 없으면 true
}



void PrintMap() {
	for (int i = 0; i < HEIGHT; ++i) {
		for (int k = 0; k < WIDTH; ++k) {
			if (GameMap[i][k] == 42) {
				std::cout << "★ ";
				continue;
			}
			switch (GameMap[i][k]) {
			case ROAD:
				std::cout << ". ";
				break;
			case OBSTACLE:
				std::cout << "△ ";
				break;
			case START:
				std::cout << "S ";
				break;
			case END:
				std::cout << "E ";
				break;
			default:
				break;
			}
		}
		std::cout << '\n';
	}
}
